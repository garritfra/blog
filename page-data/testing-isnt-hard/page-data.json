{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/testing-isnt-hard/","result":{"data":{"site":{"siteMetadata":{"title":"Garrits Blog","social":[{"name":"github","url":"https://github.com/garritfra"},{"name":"linkedin","url":"https://linkedin.com/in/garrit-franke-0558b1172"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"e1e04b37-6b9b-5b93-a9ee-0ac009087a11","excerpt":"\"I write two tests before implementing a method\", \"My project has 90% coverage\". I don't know about you, but that's something I don't hear…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing isn't hard\",\n  \"date\": \"2019-11-08T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u201CI write two tests before implementing a method\\u201D, \\u201CMy project has 90% coverage\\u201D.\"), mdx(\"p\", null, \"I don\\u2019t know about you, but that\\u2019s something I don\\u2019t hear very often. But why is that? \"), mdx(\"p\", null, \"Testing is not even that difficult to do, but yet it is always coming short in my projects. About a year ago, I\\u2019ve tried to implement tests in my React applications with little success, mostly because integrating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enzyme\"), \" and configuring it correctly is not that intuitive as a relatively new developer. I want to share my (partly opinionated) approach to JavaScript testing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \", to get you started. In a later post I will demonstrate a way to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enzyme\"), \" into your React projects.\"), mdx(\"h1\", {\n    \"id\": \"the-basics-of-testing-javascript-functions\"\n  }, \"The basics of testing JavaScript functions\"), mdx(\"p\", null, \"To get started, you need a npm-project. I don\\u2019t think I have to explain that, but just in case:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir awesome-testing-project\\ncd awesome-testing-project\\nnpm init -y\\n\")), mdx(\"p\", null, \"Of course, we need a unit we want to test. What about a method that returns the first element of an array?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = function firstElement(arr) {\\n  return arr[1];\\n}\\n\")), mdx(\"p\", null, \"You already spotted a bug, huh? Let\\u2019s keep it simple for now.\"), mdx(\"p\", null, \"Install and initialize Jest, an open-source testing framework maintained by Facebook. When initializing, you should check every question with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i --save-dev jest\\nnpx jest --init\\n\")), mdx(\"p\", null, \"Next up, we need to define our first test. Conventionally, we create a folder named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" in the directory of the module we want to test. inside it, there should be a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<module>.test.js\"), \". Something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u25B6 tree \\n.\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 src\\n    \\u251C\\u2500\\u2500 __tests__\\n    \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 firstElement.test.js\\n    \\u2514\\u2500\\u2500 firstElement.js\\n\")), mdx(\"p\", null, \"Jest provides global functions that do not need to be imported in a file. A simple test can look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const firstElement = require('../firstElement.js');\\n\\ntest('firstElement gets first element of array', () => {\\n  expect(firstElement([1, 2])).toBe(1);\\n});\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expect\"), \" is another word for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assert\"), \". If you ask me, \\u201CExpect firstElement of \", \"[1, 2]\", \" to be 1\\u201D sounds reasonably english, doesn\\u2019t it? After defining the test, all there is to do left is to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test\"), \" command, which has been created for us by running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx jest --init\"), \" earlier.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u25B6 npm test\\n> jest\\n\\n FAIL  src/__tests__/firstElement.test.js\\n  \\u2715 firstElement (6ms)\\n\\n  \\u25CF firstElement\\n\\n    expect(received).toBe(expected) // Object.is equality\\n\\n    Expected: 1\\n    Received: 2\\n\\n      2 | \\n      3 | test('firstElement', () => {\\n    > 4 |   expect(firstElement([1, 2])).toBe(1);\\n        |                                ^\\n      5 | });\\n      6 | \\n\\n      at Object.<anonymous>.test (src/__tests__/firstElement.test.js:4:32)\\n\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 total\\nSnapshots:   0 total\\nTime:        1.1s\\nRan all test suites.\\nnpm ERR! Test failed.  See above for more details.\\n\")), mdx(\"p\", null, \"Whoops! Looks like we have found a bug! Let\\u2019s fix it by adjusting the index of the return value in the firstElement function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = function firstElement(arr) {\\n  return arr[0];\\n}\\n\")), mdx(\"p\", null, \"And after rerunning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u25B6 npm test \\n> jest\\n\\n PASS  src/__tests__/firstElement.test.js\\n  \\u2713 firstElement (4ms)\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   0 total\\nTime:        0.666s, estimated 2s\\nRan all test suites.\\n\")), mdx(\"p\", null, \"Yay, your first unit test! Of course, there is much more to find out about the Jest framework. To see a full guide, read the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/\"\n  }), \"official docs\"), \".\"), mdx(\"p\", null, \"I have prepared a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/garritfra/react-parcel-boilerplate\"\n  }), \"template repository\"), \" for building react apps. It also uses Jest to run tests, you don\\u2019t have to worry about a thing! If you found this interesting, consider checking out my other blog posts, and/or check out my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/garritfra\"\n  }), \"GitHub\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/testing-isnt-hard/","title":"Testing isn't hard","tags":[],"keywords":[],"date":"November 08, 2019"},"previous":{"__typename":"MdxBlogPost","id":"c492e215-f427-5fac-9550-2112bd99fe0d","excerpt":"Yesterday, I came across an interesting bug regarding JavaScript Arrays, and I wanted to share my approach to fixing it.\nAt a basic level, I…","slug":"/fighting-array-functions-with-es6/","title":"Fighting Array Functions with ES6","date":"April 07, 2019"},"next":{"__typename":"MdxBlogPost","id":"f51c38d0-7670-54e2-9251-0f1db499d939","excerpt":"Ever find yourself in a situation where you simply want to save or share the output of a terminal command? Selecting, copying and pasting…","slug":"/quick-tip-terminal-pastebin/","title":"Quick Tip! Sharing terminal output with Termbin","date":"December 31, 2019"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e1e04b37-6b9b-5b93-a9ee-0ac009087a11","previousId":"c492e215-f427-5fac-9550-2112bd99fe0d","nextId":"f51c38d0-7670-54e2-9251-0f1db499d939"}}}